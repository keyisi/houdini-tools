<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="tool_1" label="Import Alembic" icon="SOP_file">
    <script scriptType="python"><![CDATA[import hou
import os
import re

def clean_node_name(name):

    # ç§»é¤æä»¶æ©å±å
    name = os.path.splitext(name)[0]
    # æ¿æ¢æ æå­ç¬¦ä¸ºä¸åçº¿
    name = re.sub(r'[^a-zA-Z0-9_]', '_', name)
    return name

def import_abc_batch():
    # å¼¹åºæä»¶éæ©å¯¹è¯æ¡ï¼æ¯æå¤é
    file_paths = hou.ui.selectFile(
        title="éæ©Alembicæä»¶",
        pattern="*.abc",
        default_value=hou.expandString("$HIP/"),
        multiple_select=True,  # å¯ç¨å¤é
        file_type=hou.fileType.Any  # åè®¸éæ©æä»¶
    )

    # å¦ææ²¡æéæ©æä»¶ï¼ç´æ¥è¿å
    if not file_paths:
        return

    # å°æä»¶è·¯å¾æåä¸ºåç»
    file_paths_list = [path.strip() for path in file_paths.split(';') if path.strip()]

    for node in file_paths_list:
        #print(node)
        # è·åæä»¶åå¹¶æ¸ç
        nodename = os.path.basename(node)
        nodename = clean_node_name(nodename)

        # åå»º geo èç¹
        try:
            geo = hou.node('/obj').createNode('geo', nodename)
            geo.moveToGoodPosition()
            # åå»º alembic èç¹
            alc = geo.createNode('alembic')
            alc.parm('fileName').set(node)
            alc.parm('curveFilter').set(0)
            #print(f"æåå¯¼å¥: {nodename}")
        except hou.OperationFailed as e:
            hou.ui.displayMessage(f"åå»ºèç¹å¤±è´¥: {nodename} - {e}")

import_abc_batch()]]></script>
  </tool>

  <tool name="tool_2" label="Import Camera" icon="OBJ_camera">
    <script scriptType="python"><![CDATA[import os
import hou

try:
    # éæ© Alembic æä»¶
    node = hou.ui.selectFile(title='Select a alembic file', file_type=hou.fileType.Alembic)
    nodename = os.path.basename(node)
    nodename = os.path.splitext(os.path.basename(node))[0]
    #print(nodename)
    # æ£æ¥ç¨æ·æ¯å¦åæ¶äºéæ©
    if node is None:
        pass  # éåºèæ¬
        
    # åå»º Alembic Archive èç¹
    geo = hou.node('/obj').createNode('alembicarchive',nodename)
    geo.parm('fileName').set(node)
    geo.parm('buildSubnet').set(0)
    geo.parm('channelRef').set(1)
    geo.parm('buildHierarchy').pressButton()
    
        # å¨èç¹åé¨æ¥æ¾ camera èç¹
    def find_camera_node(node):
        for child in node.children():
            if child.type().name() == 'cam':
                return child
            # éå½æ¥æ¾å­èç¹çå­èç¹
            found_camera = find_camera_node(child)
            if found_camera:
                return found_camera
        return None
    
    # æ¥æ¾ camera èç¹
    camera_node = find_camera_node(geo)
    
    if camera_node:
        inputs = hou.ui.readMultiInput(
        message="Enter resolution:",
        input_labels=("Width (X):", "Height (Y):"),
        buttons=("OK", "Cancel"),
        initial_contents=("1920", "1080")  # é»è®¤å¼
    )
    
    
        # æ£æ¥ç¨æ·æ¯å¦åæ¶äºè¾å¥
        if inputs[0] == 1:  # 1 è¡¨ç¤ºç¨æ·ç¹å»äº "Cancel"
            print("Resolution input was canceled.")
            exit()
               
        resx_str, resy_str = inputs[1]
        myresx = int(resx_str)  # å°è¾å¥çå®½åº¦è½¬æ¢ä¸ºæ´æ°
        myresy = int(resy_str)  # å°è¾å¥çé«åº¦è½¬æ¢ä¸ºæ´æ°
      
        camera_node.parm('resx').set(myresx)  # è®¾ç½®æ°´å¹³åè¾¨ç
        camera_node.parm('resy').set(myresy)  # è®¾ç½®åç´åè¾¨ç

        #print(f"Found camera node: {camera_node.path()}")
    else:
        geo.destroy()
        hou.ui.displayMessage("å½åæä»¶æªæ¾å°ç¸æº")
        

except:
    pass]]></script>
  </tool>

  <toolshelf name="EggSandTools" label="EggSandTools">
    <memberTool name="tool_1"/>
    <memberTool name="tool_2"/>
  </toolshelf>

  <shelfSetEdit name="shelf_set_1" fileLocation="D:/Program Files/Side Effects Software/Houdini 20.5.370/houdini/toolbar/ShelfDefinitions.shelf">
    <addMemberToolshelf name="ui" inPosition="14"/>
    <addMemberToolshelf name="EggSandTools" inPosition="15"/>
  </shelfSetEdit>
</shelfDocument>
